exports.markdown_text = "To convert Markdown to Telegra.ph `Node` format, you would need a parser that can handle Markdown, and a converter to transform the parsed data into the Telegra.ph `Node` structure. Here's one way to do it using Node.js:\n\n1. **Install Required Packages**\n   You will need a Markdown parser like `markdown-it` to parse Markdown content, and a utility to help with the conversion.\n\n   ```bash\n   npm install markdown-it\n   ```\n\n2. **Create the Conversion Utility**\n   Create a utility function to traverse the parsed Markdown AST and transform it into the Telegra.ph `Node` structure.\n\n3. **Code Example**\n\nHere's a *complete* example of how to achieve this:\n\n```javascript\nconst MarkdownIt = require('markdown-it');'&gt;'\n\n// Initialize markdown-it parser\nconst md = new MarkdownIt();\n\n// Function to convert Markdown AST into Telegra.ph Node format\nfunction convertTokensToNodes(tokens) {\n  let nodes = [];\n  let stack = [];\n\n  tokens.forEach(token => {\n    const { type, tag, content, children, attrs } = token;\n    \n    switch(type) {\n      case 'text':\n        nodes.push(content);\n        break;\n\n      case 'paragraph_open':\n        stack.push({ tag: 'p', children: [] });\n        break;\n\n      case 'paragraph_close':\n        const paragraph = stack.pop();\n        nodes.push(paragraph);\n        break;\n\n      case 'heading_open':\n        stack.push({ tag: 'h' + tag.slice(1), children: [] });\n        break;\n\n      case 'heading_close':\n        const heading = stack.pop();\n        nodes.push(heading);\n        break;\n\n      case 'em_open':\n        stack.push({ tag: 'em', children: [] });\n        break;\n\n      case 'em_close':\n        const em = stack.pop();\n        if (stack.length > 0) {\n          stack[stack.length - 1].children.push(em);\n        } else {\n          nodes.push(em);\n        }\n        break;\n\n      case 'strong_open':\n        stack.push({ tag: 'strong', children: [] });\n        break;\n\n      case 'strong_close':\n        const strong = stack.pop();\n        if (stack.length > 0) {\n          stack[stack.length - 1].children.push(strong);\n        } else {\n          nodes.push(strong);\n        }\n        break;\n\n      case 'link_open':\n        const href = token.attrs.find(attr => attr[0] === 'href')[1];\n        stack.push({ tag: 'a', attrs: { href }, children: [] });\n        break;\n\n      case 'link_close':\n        const link = stack.pop();\n        if (stack.length > 0) {\n          stack[stack.length - 1].children.push(link);\n        } else {\n          nodes.push(link);\n        }\n        break;\n\n      case 'bullet_list_open':\n        stack.push({ tag: 'ul', children: [] });\n        break;\n\n      case 'bullet_list_close':\n        const ul = stack.pop();\n        nodes.push(ul);\n        break;\n\n      case 'ordered_list_open':\n        stack.push({ tag: 'ol', children: [] });\n        break;\n\n      case 'ordered_list_close':\n        const ol = stack.pop();\n        nodes.push(ol);\n        break;\n\n      case 'list_item_open':\n        stack.push({ tag: 'li', children: [] });\n        break;\n\n      case 'list_item_close':\n        const li = stack.pop();\n        stack[stack.length - 1].children.push(li);\n        break;\n\n      case 'image':\n        const src = token.attrs.find(attr => attr[0] === 'src')[1];\n        nodes.push({ tag: 'img', attrs: { src } });\n        break;\n\n      default:\n        if (children && children.length > 0) {\n          const childNodes = convertTokensToNodes(children);\n          childNodes.forEach(childNode => {\n            if (stack.length > 0) {\n              stack[stack.length - 1].children.push(childNode);\n            } else {\n              nodes.push(childNode);\n            }\n          });\n        }\n        break;\n    }\n  });\n\n  return nodes;\n}\n\n// Function to convert Markdown string to Telegra.ph Node format\nfunction markdownToTelegraPhNodes(markdown) {\n  const tokens = md.parse(markdown, {});\n  return convertTokensToNodes(tokens);\n}\n\n// Example usage\nconst markdownContent = `\n# Heading 1\nThis is a *paragraph* with some **bold** text and a [link](https://example.com).\n\n- List item 1\n- List item 2\n\n1. Ordered item 1\n2. Ordered item 2\n\n![Image](https://example.com/image.jpg)\n`;\n\nconst telegraPhNodes = markdownToTelegraPhNodes(markdownContent);\nconsole.log(JSON.stringify(telegraPhNodes, null, 2));\n```\n\n### Explanation:\n\n1. **Parsing Markdown:**\n   - Use `markdown-it` to parse the Markdown content into tokens.\n\n2. **Conversion to Telegra.ph Nodes:**\n   - Create a `convertTokensToNodes` function which traverses the tokens and creates the corresponding Telegra.ph nodes.\n   - Use a stack to manage nested elements properly (e.g., nested lists, emphasized text within paragraphs).\n\n3. **Example Usage:**\n   - Convert a sample Markdown string to Telegra.ph nodes and log the result.\n\nThis approach will handle the specified HTML tags and attributes correctly, and can be extended to support additional Markdown features as needed.";
