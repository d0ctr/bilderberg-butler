const { JSDOM } = require('jsdom');

const { InlineKeyboard } = require('grammy');

const { YA300_API_BASE } = require('../../config.json');

async function getSummaryURL({ article_url }) {
    return await fetch(
        `${YA300_API_BASE}`,
        {
            method: 'post',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `OAuth ${process.env.YA300_TOKEN}`
            },
            body: JSON.stringify({ article_url })
        }
    );
}

async function getSummaryHTML(url) {
    return await fetch(url);
}

async function parseSummary(response) {
    const html = await response.text();
    const result = {};
    const $ = require('jquery')((new JSDOM(html)).window);
    const summaryDiv = $('.summary .summary-content .summary-text');

    result.title = summaryDiv.find('.title').text()?.trim();
    result.summary = summaryDiv.find('li.thesis a').get()?.map(thesis => {
        return { text: thesis.text?.trim(), url: thesis.href };
    });
    result.sharing_url = response.url;

    return result;
}

exports.definition = {
    command_name: 'tldr',
    args: [
        {
            name: 'url',
            type: 'string',
            description: '–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—å—é.',
            optional: false
        }
    ],
    is_inline: true,
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Ç–∫–∏–π –ø–µ—Ä—Å–∫–∞–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π YandexGPT'
};

exports.condition = !!process.env.YA300_API_BASE;

async function handler(input, interaction) {
    const text = require('./utils').parseArgs(input)[1] || input.message?.reply_to_message?.text || input.message?.reply_to_message?.caption || '';

    const article_url = text.split(' ').find(words => words.match(/https?:\/\//));

    if (!article_url) {
        return ['–î–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω—É–∂–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä https://habr.com/ru/news/729422/'];
    }

    return getSummaryURL({ article_url })
        .then(response => response.json())
        .catch(err => { throw { why: 'badresponse', error: err } })
        .then(({ status, sharing_url }) => {
            interaction.logger.silly(`Received response from Ya300`);
            if (status !== 'success') throw { message: `API responded with status=${status}`, why: 'badstatus' };
            return getSummaryHTML(sharing_url);
        })
        .catch(err => { throw { why: err.why || 'badresponse', error: err.error || err } })
        .then(response => parseSummary(response))
        .then(({ title, summary, sharing_url }) => {
            interaction.logger.silly(`Parsed summary from Ya300`);
            if (!summary) throw { message: 'No title/summary in response', why: 'badparsing' };
            return [
                null,
                `<b>${title}</b>\n${summary.reduce((acc, thesis) => acc += `${thesis.text}<a href="${thesis.url}">üîó</a>\n`, '')}`,
                null,
                { reply_markup: new InlineKeyboard().url('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–∞–π—Ç–µ', sharing_url)}
            ];
        })
        .catch(err => {
            interaction.logger.error(err.message || err.error?.message || 'Error', { error: err.stack || err, args: [text, article_url] });
            switch (err?.why) {
                case 'badparsing':
                    return ['–ë–æ—Ç—É —á–µ–≥–æ-—Ç–æ –ø–æ–ø–ª–æ—Ö–µ–ª–æ, –¥–∞–≤–∞–π –Ω–∞ —Ç—É —Å—Å—ã–ª–∫—É –±–æ–ª—å—à–µ –Ω–µ —Ö–æ–¥–∏—Ç—å'];
                case 'badstatus':
                    return ['–Ø–Ω–¥–µ–∫—Å –ø—Ä–æ—Å–∏–ª –ø–µ—Ä–µ–¥–∞—Ç—å, —á—Ç–æ —Ç–∞–º –Ω–∏—á–µ–≥–æ —Ö–æ—Ä–æ—à–µ–≥–æ –Ω–µ—Ç'];
                case 'badresponse':
                    return ['–Ø–Ω–¥–µ–∫—Å—É –ø–æ–ø–ª–æ—Ö–µ–ª–æ, –º–æ–∂–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ'];
                default:
                    return [`–ß—Ç–æ-—Ç–æ —Å–æ–≤—Å–µ–º –Ω–µ —Ç–∞–∫:\n<code>${err.message}</code>`]
            }
        });
}

exports.tldr = handler;